# 1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.

#def sum_of_multiples_of_3_or_5 limit
	#(1..(limit-1)).inject(0) {|sum,n| (n%3==0||n%5==0) ? sum+n : sum} 
#end
#p sum_of_multiples_of_3_or_5(1000)



#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



# 2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#This may be a small improvement. The Fibonacci series is:

#1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610...
#
#Now, replacing an odd number with O and an even with E, we get:
#
#O, O, E, O, O, E, O, O, E, O, O, E, O, O, E...
#
#And so each third number is even.  We don't need to calculate the odd numbers.  Starting from an two odd terms x, y, the series is:

#x, y, x + y, x + 2y, 2x + 3y, 3x + 5y link x,y,sum,x,y,sum,x....

#def sum_of_even_values_in_fibonacci_sequence
	#x=y=1
	#sum = 0
	#while(x < 4000000 && y < 4000000)
		#sum += (x + y)
		#x,y=x+2*y,2*x+3*y
	#end
	#p sum 
#end
#sum_of_even_values_in_fibonacci_sequence	



#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#The prime factors of 13195 are 5, 7, 13 and 29.
#
#What is the largest prime factor of the number 600851475143 ?

def largest_prime_factor_of(num)
	require 'prime'
	Prime.each(num) do |p|
		break if p >= num 
		num /= p while num%p==0
	end
	num
end
p largest_prime_factor_of(600851475143)