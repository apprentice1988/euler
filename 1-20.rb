# 1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.

#def sum_of_multiples_of_3_or_5 limit
	#(1..(limit-1)).inject(0) {|sum,n| (n%3==0||n%5==0) ? sum+n : sum} 
#end
#p sum_of_multiples_of_3_or_5(1000)



#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



# 2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#This may be a small improvement. The Fibonacci series is:

#1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610...
#
#Now, replacing an odd number with O and an even with E, we get:
#
#O, O, E, O, O, E, O, O, E, O, O, E, O, O, E...
#
#And so each third number is even.  We don't need to calculate the odd numbers.  Starting from an two odd terms x, y, the series is:

#x, y, x + y, x + 2y, 2x + 3y, 3x + 5y link x,y,sum,x,y,sum,x....

#def sum_of_even_values_in_fibonacci_sequence
	#x=y=1
	#sum = 0
	#while(x < 4000000 && y < 4000000)
		#sum += (x + y)
		#x,y=x+2*y,2*x+3*y
	#end
	#p sum 
#end
#sum_of_even_values_in_fibonacci_sequence	



#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 3. The prime factors of 13195 are 5, 7, 13 and 29.
#
#What is the largest prime factor of the number 600851475143 ?
##
#def largest_prime_factor_of(num)
	#require 'prime'
	#Prime.each(num) do |p|
		#break if p >= num 
		#num /= p while num%p==0
	#end
	#num
#end
#p largest_prime_factor_of(600851475143)






#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 4. A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

#Find the largest palindrome made from the product of two 3-digit numbers.

#method 1
#class Array
	#def product
		#self.inject(1){|pro,i|pro*i}
	#end
#end
#
#
#def prime_factors_list num 
	#require "prime"
	#list = []
	#Prime.each(num) do |p|
		#break if p >= num 
		#while num%p == 0
			#list << p 
			#num /= p 
		#end
	#end
	#list << num
#end
#
#def array_seperate_by_two_factors_with_some_digits?(arr,num)
	#range = (10**(num-1)..(10**num-1))
	#1.upto(arr.length).each do |n|
		#arr.combination(n).to_a.each do |a|
			#b = arr.dup
			#a.each do |u|
			 #z = b.index(u)
			 #b.delete_at(z)
			#end
			#return true if range.include?(a.product) && range.include?(b.product)
		#end
	#end
	#false
#end
#
#
#def largest_palindrome_with_two
	#num = 0 
	#9.downto(1).each do |a|
		#9.downto(0).each do |b|
			#9.downto(0).each do |c|
				#num = a*100000 + b*10000 + c*1000+c*100+b*10+a 
				#list = prime_factors_list(num) 
				#return num if array_seperate_by_two_factors_with_some_digits?(list,3)
			#end
		#end
	#end
#end
#p largest_palindrome_with_two

###############
#method 2

#def isPalindrom(n)
	#n.to_s == n.to_s.reverse
#end
#
#def product(minB,maxB)
	#products = []
	#(minB..maxB).to_a.each do |i|
		#(minB..maxB).to_a.each do |j|
			#products << i*j
		#end
	#end
	#products.uniq.keep_if{|x|isPalindrom(x)}.max 
#end
#p product(100,999)


#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 5. 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

#What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

#method1

#def smallest_multiple n
	#require 'prime'
	#list = {}
	#2.upto(n).each do |i|
		#ar = []
		#Prime.each(i) do |p|
			#break if p >= i
			#while i%p == 0
				#ar << p 
				#i /= p 
			#end
		#end
		#ar << i
		#list.merge!(ar.group_by{|x|x}){|key,o,n|o.count > n.count ? o : n}
	#end
	#result = list.values.flatten!.inject(){|pro,i|pro*i}
#end
#p smallest_multiple(20)

##################333
###method 2
# (1..20).inject(:lcm)  lcm 是integer求最小公倍数的方法



#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 6  略


#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 7.  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

#What is the 10 001st prime number?

# require 'prime'
# Prime.first(10001).last





#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 8.  Find the greatest product of five consecutive digits in the 1000-digit number.
#    7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

#def arr_pro arr 
	#arr.inject(1){|pro,i|pro*(i.to_i)}
#end
#
#a = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
#b = a.split("")
#product = 0
#b.each_cons(5) {|a|arr_pro(a) > product ? product = arr_pro(a) : next}
#p product



#****************************************************************************************
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 10.The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
#Find the sum of all the primes below two million.

# require 'prime'
# Prime.each(2000000).to_a.inject{|sum,i|sum+i}
